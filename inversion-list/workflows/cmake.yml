name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/hou-12

    - name: Install lcov
      run: sudo apt-get install lcov

    - name: Install valgrind
      run: sudo apt-get install valgrind

    - name: Install cppcheck
      run: sudo apt-get install cppcheck

    - name: Install flawfinder
      run: sudo apt-get install flawfinder

    - name: Install coveralls-lcov
      run: sudo gem install coveralls-lcov

    - name: Install cclint
      run: sudo pip install cclint

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_COVERAGE=1 -DUSE_VALGRIND=1 -DRUN_CPPCHECK=1

    - name: Build
      working-directory: ${{github.workspace}}/build
      run: make

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Lint
      working-directory: ${{github.workspace}}/build
      run: make cclint

    - name: Flaw Finder
      working-directory: ${{github.workspace}}/build
      run: make flawfinder

    - name: Coverage
      working-directory: ${{github.workspace}}/build
      run: make coverage

    - name: Post coverage
      working-directory: ${{github.workspace}}/build
      run: coveralls-lcov --repo-token=${{secrets.COVERALLS_TOKEN}} coverage.info
